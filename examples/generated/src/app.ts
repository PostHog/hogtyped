/**
 * Example app using the GENERATED PostHog wrapper
 *
 * The key difference: schemas are baked into the generated code
 * No runtime loading, no network requests, just pure TypeScript!
 */

// This file is auto-generated by running: npx hogtyped generate
import hogtyped from './posthog.generated';

// Initialize with your API key
hogtyped.init('YOUR_API_KEY');

// ============ Full Type Safety ============

// ✅ GOOD: All properties are type-checked at compile time
hogtyped.capture('button_clicked', {
  buttonId: 'submit-btn',
  page: '/checkout',
  buttonText: 'Complete Purchase',
  timestamp: Date.now()
});

// ❌ COMPILE ERROR: Missing required property 'page'
// @ts-expect-error - This will not compile!
hogtyped.capture('button_clicked', {
  buttonId: 'submit-btn'
  // Missing required 'page' property
});

// ❌ COMPILE ERROR: Wrong property type
hogtyped.capture('button_clicked', {
  buttonId: 'submit-btn',
  page: '/checkout',
  // @ts-expect-error - This will not compile!
  timestamp: 'not-a-number' // Should be number!
});

// ============ Complex Events ============

hogtyped.capture('form_submitted', {
  formId: 'signup-form',
  formName: 'User Registration',
  fields: [
    { name: 'email', type: 'email', value: 'user@example.com' },
    { name: 'password', type: 'password', value: '***' },
    { name: 'plan', type: 'select', value: 'pro' }
  ],
  validationErrors: [] // No errors!
});

// ============ IDE Autocomplete ============

// When you type this, your IDE will:
// 1. Suggest event names: 'button_clicked', 'form_submitted', 'page_viewed'
// 2. Show required/optional properties for each event
// 3. Provide inline documentation
// 4. Catch typos before you even save the file!

hogtyped.capture('page_viewed', {
  url: 'https://example.com/products',
  title: 'Products | Example Store',
  referrer: 'https://google.com',
  duration: 45.2
});

// ============ Runtime Validation ============

// Even though types are checked at compile time,
// runtime validation still happens (useful for data from APIs)

const untrustedData = JSON.parse('{"buttonId": "btn", "page": 123}'); // page should be string!

try {
  // This will pass TypeScript (any type) but fail at runtime
  hogtyped.capture('button_clicked', untrustedData as any);
} catch (error) {
  console.error('Runtime validation failed:', error);
}

// ============ Benefits of Generated Approach ============

console.log(`
Benefits of the generated wrapper:

1. Zero Runtime Loading
   - Schemas are embedded in the generated file
   - No network requests, no async loading
   - Instant validation

2. Optimal Bundle Size
   - Only includes schemas you actually use
   - Tree-shaking friendly
   - No schema loader code in production

3. Works Everywhere
   - Node.js ✅
   - Browser ✅
   - React Native ✅
   - Edge Functions ✅
   - Serverless ✅

4. Developer Experience
   - Full IntelliSense and autocomplete
   - Compile-time type checking
   - Inline documentation
   - Refactoring support

5. Performance
   - No runtime schema parsing
   - Validators compiled at build time
   - Minimal overhead
`);